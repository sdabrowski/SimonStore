@model SimonStore.Models.Product
@{
    ViewBag.Title = "Index";
}
<div class="row">
    <div class="col-xs-12 col-sm-10">
        <h2>@Model.Name</h2>

        <p>@Model.Description</p>
        <p><strong>Price: </strong>@((Model.Price ?? 0m).ToString("c"))</p>
        @using (Html.BeginForm())
        {
            @* using hidden form fields makes these properties part of the POST payload.
            ASP.Net MVC will automatically map these to the ProductModel parameter if I declare these correctly
            *@
            @Html.HiddenFor(x => x.SKU)
            @Html.HiddenFor(x => x.Name)
            @Html.HiddenFor(x => x.Description)
            @Html.HiddenFor(x => x.Price)
            <label for="quantity" class="control-label">Quantity</label>
            <select name="quantity" required class="form-control">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
                <option>6</option>
                <option>7</option>
                <option>8</option>
                <option>9</option>
            </select>

            <input type="submit" value="Add To Cart" class="btn btn-primary" />
        }
    </div>
    <div class="col-xs-12 col-sm-2">
        @if (@Model.ProductImages.Any())
        {
            <img class="img-responsive pull-right" src="@Model.ProductImages.First().ImageLocation" alt="@Model.ProductImages.First().AlternateText" />
        }
    </div>
</div>
